openapi: 3.0.1
info:
  title: Figma Relay (Local)
  version: '0.1'
servers:
  - url: http://localhost:3000
paths:
  /health:
    get:
      operationId: health
      summary: Health check
      responses:
        '200':
          description: ok
  /validate/taskSpec:
    post:
      operationId: validateTaskSpec
      summary: Validate TaskSpec against JSON Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - taskSpec
              properties:
                taskSpec:
                  type: object
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                required:
                  - valid
                  - errors
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        instancePath:
                          type: string
                        message:
                          type: string
  /validate/exportSpec:
    post:
      operationId: validateExportSpec
      summary: Validate ExportSpec against JSON Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - exportSpec
              properties:
                exportSpec:
                  type: object
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                required:
                  - valid
                  - errors
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        instancePath:
                          type: string
                        message:
                          type: string
  /tasks:
    post:
      operationId: postTask
      summary: Create a build task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskSpec:
                  type: object
      responses:
        '200':
          description: Created
  /tasks/pull:
    get:
      operationId: pullTask
      summary: Pull next pending task and mark it as running
      parameters:
        - in: query
          name: pluginId
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Task payload
          content:
            application/json:
              schema:
                type: object
                required:
                  - taskId
                  - taskSpec
                properties:
                  taskId:
                    type: string
                    nullable: true
                  taskSpec:
                    type: object
                    nullable: true
  /tasks/{id}:
    get:
      operationId: getTask
      summary: Get task status/result
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task entry
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - status
                  - createdAt
                  - taskSpec
                  - logs
                properties:
                  id:
                    type: string
                  status:
                    type: string
                    enum: [pending, queued, running, done, error]
                  createdAt:
                    type: integer
                    format: int64
                  taskSpec:
                    type: object
                  logs:
                    type: array
                    items:
                      type: string
                  result:
                    type: object
                    nullable: true
                  artifactPath:
                    type: string
                    nullable: true
                  artifactSize:
                    type: integer
                    nullable: true
                  error:
                    type: string
                    nullable: true
  /tasks/{id}/result:
    get:
      operationId: getTaskResult
      summary: Get task result (ExportSpec), status and logs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Result envelope
          content:
            application/json:
              schema:
                type: object
                required:
                  - taskId
                  - status
                  - exportSpec
                  - logs
                  - error
                properties:
                  taskId:
                    type: string
                  status:
                    type: string
                    enum: [pending, queued, running, done, error]
                  exportSpec:
                    type: object
                    nullable: true
                  logs:
                    type: array
                    items:
                      type: string
                  error:
                    type: string
                    nullable: true
                  artifactPath:
                    type: string
                    nullable: true
                  artifactSize:
                    type: integer
                    nullable: true
        '404':
          description: Not found
    post:
      operationId: postTaskResult
      summary: Post exported result (ExportSpec) for a task
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: object
      responses:
        '200':
          description: Ok
  /results:
    post:
      operationId: postResults
      summary: Post ExportSpec and logs (compat API)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - taskId
                - exportSpec
              properties:
                taskId:
                  type: string
                exportSpec:
                  type: object
                logs:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Ok
  /tasks/{id}/artifact:
    get:
      operationId: getTaskArtifact
      summary: Download task artifact (ExportSpec JSON)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Artifact JSON file
          content:
            application/json:
              schema:
                type: object
  /tasks/{id}/package.zip:
    get:
      operationId: getTaskArtifactZip
      summary: Download artifact ZIP package for task
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ZIP package containing exportSpec.json, logs.txt, task.json, meta.json
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: No artifact
  /artifacts/bulk.zip:
    post:
      operationId: downloadArtifactsBulkZip
      summary: Download multiple artifacts as a ZIP (by ids)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  minItems: 1
                  maxItems: 50
                  items:
                    type: string
      responses:
        '200':
          description: ZIP with multiple artifacts
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request (ids empty/too many/too large)
        '413':
          description: Payload too large (size cap exceeded)
  /artifacts:
    get:
      operationId: listArtifacts
      summary: List artifacts with pagination
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
          required: false
          description: Page size (max 200)
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          required: false
          description: Sort order by createdAt
      responses:
        '200':
          description: Paginated artifacts
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    description: List of artifacts in the current page
                    items:
                      type: object
                      required:
                        - id
                        - createdAt
                        - size
                        - hasZip
                      properties:
                        id:
                          type: string
                        createdAt:
                          type: number
                        size:
                          type: number
                        hasZip:
                          type: boolean
                  total:
                    type: integer
                    description: Total number of artifacts available across all pages
                  offset:
                    type: integer
                    description: Offset used for the current page of results
                  limit:
                    type: integer
                    description: Maximum number of artifacts returned in the current page
  /tasks/{id}/log:
    post:
      operationId: appendTaskLog
      summary: Append a log message to the task
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Ok
  /tasks/{id}/watch:
    get:
      operationId: watchTaskSSE
      summary: Subscribe to task status via Server-Sent Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: text/event-stream with task events
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  SSE stream. Events:
                    - event: status  data: {"status","logs","exportSpec","artifactPath","artifactSize"}
                    - event: log     data: {"message","ts"}
                    - event: result  data: {"status","exportSpec","artifactPath","artifactSize"}
        '404':
          description: Not found
  /tasks/latest:
    get:
      operationId: getLatestTask
      summary: Get most recent task by status
      parameters:
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - pending
              - running
              - done
            default: pending
      responses:
        '200':
          description: Latest task by createdAt
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - status
                  - createdAt
                  - taskSpec
                properties:
                  id:
                    type: string
                  status:
                    type: string
                    enum:
                      - pending
                      - running
                      - done
                  createdAt:
                    type: number
                  taskSpec:
                    type: object
        '404':
          description: No tasks for given status
